#!/usr/bin/env -S sh -c 'exec "$(dirname "$0")/.venv/bin/python" "$0" "$@"'
# vim:ft=python
import os
import socket
import argparse
from typing import Dict, List
from lib.hypr_lib import HyprlandMonitorsResponse

PROFILE_DIRECTORY = f"{os.getenv("HOME")}/.local/share/hyprmon"

def send_hyprland_command(command):
    # Get the socket path from environment variable
    socket_path = os.environ.get('HYPRLAND_INSTANCE_SIGNATURE')
    
    if not socket_path:
        print("Error: HYPRLAND_INSTANCE_SIGNATURE environment variable not set")
        return None
    
    # Construct the full socket path
    socket_path = f"/run/user/1000/hypr/{socket_path}/.socket.sock"
    
    # Create a Unix socket
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    
    try:
        # Connect to the socket
        sock.connect(socket_path)
        
        # Send the command
        sock.send(command.encode())
        
        # Receive the response properly by accumulating chunks
        chunks = []
        while True:
            chunk = sock.recv(1024)  # Using a larger buffer size
            if not chunk:  # If no data received, we're done
                break
            chunks.append(chunk)
        
        # Combine all chunks and decode
        response = b''.join(chunks).decode()
        
        return response
    except Exception as e:
        print(f"Error communicating with Hyprland: {e}")
        return None
    finally:
        sock.close()

def find_in_list(pred, l: list):
    for item in l:
        if pred(item):
            return item
    return None

def get_monitors() -> List[HyprlandMonitorsResponse]:
    hypr_response = send_hyprland_command("j/monitors")
    return HyprlandMonitorsResponse.schema().loads(hypr_response or b'[]', many=True)

def save_profile(profile_name: str):
    print(f"saving current monitor layout as {profile_name}")
    data = get_monitors()
    os.makedirs(PROFILE_DIRECTORY, exist_ok=True)
    with open(f"{PROFILE_DIRECTORY}/{profile_name}.json", "w") as f:
        f.write(HyprlandMonitorsResponse.schema().dumps(data, many=True))

def load_profile(profile_name: str):
    print(f"loading monitor layout from {profile_name}")
    with open(f"{PROFILE_DIRECTORY}/{profile_name}.json", "r") as f:
        data = f.read()
        monitors = HyprlandMonitorsResponse.schema().loads(data, many=True)
        monitors_in_use_by_profile = []
        for monitor in monitors:
            send_hyprland_command(monitor.keyword_restore_command())
            monitors_in_use_by_profile.append(monitor.name)

        all_monitors = get_monitors()
        for monitor in all_monitors:
            if monitor.name not in monitors_in_use_by_profile:
                send_hyprland_command(monitor.disable_command())



def list_profiles():
    profiles = os.listdir(PROFILE_DIRECTORY)
    for profile in profiles:
        # strip out .json
        profile = profile[:-5]
        print(profile)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='store and retrieve hyprland monitor profiles')
    subparsers = parser.add_subparsers(dest='command', help='the command to execute')
    
    # Command-specific subparsers
    save_parser = subparsers.add_parser('save', help='save the current monitor profile')
    save_parser.add_argument('profile', help='the name of the profile to save')
    
    load_parser = subparsers.add_parser('load', help='load a saved monitor profile')
    load_parser.add_argument('profile', help='the name of the profile to load')
    
    # List command doesn't need a profile argument
    subparsers.add_parser('list', help='list all saved profiles')
    
    args = parser.parse_args()
    match args.command:
        case "save":
            save_profile(args.profile)

        case "load":
            load_profile(args.profile)

        case "list":
            list_profiles()
